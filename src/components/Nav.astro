---
import { Image } from "astro:assets"
import { codeart } from "@/assets"
---

<header
	class="astronav-sticky-header sticky top-0 z-20 border-b border-transparent py-5 transition-all"
>
	<div class="mx-auto max-w-screen-xl px-5">
		<div
			class="relative z-10 flex flex-col items-center justify-between lg:flex-row"
			data-astro-transition-scope="astro-o7bz76pi-1"
		>
			<div class="flex w-full items-center justify-between lg:w-auto">
				<a
					href="/"
					class="focus-visible:shadow-outline-blue-500 -ml-2 flex items-center rounded-full px-2 text-lg transition focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-blue-500 focus-visible:ring-offset-2"
				>
					<Image src={codeart} alt="Logo de Codeart" class="w-48" />
					<!-- <span class="
						font-bold
						text-blue-600">Astro</Image
					><span class="text-slate-600">ship</span>
					<span
						class="ml-1 mt-0.5 rounded-md bg-gray-200 px-2 py-1 text-[10px] font-bold uppercase leading-none text-slate-700"
						>PRO</span
					> -->
				</a>
				<div class="block lg:hidden">
					<button id="astronav-menu" aria-label="Toggle Menu">
						<svg
							fill="currentColor"
							class="h-4 w-4 text-gray-800"
							width="24"
							height="24"
							viewBox="0 0 24 24"
							xmlns="http://www.w3.org/2000/svg"
							style="--darkreader-inline-fill: currentColor;"
							data-darkreader-inline-fill=""
						>
							<title>Toggle Menu</title>
							<path
								class="astronav-close-icon astronav-toggle hidden"
								fill-rule="evenodd"
								clip-rule="evenodd"
								d="M18.278 16.864a1 1 0 01-1.414 1.414l-4.829-4.828-4.828 4.828a1 1 0 01-1.414-1.414l4.828-4.829-4.828-4.828a1 1 0 011.414-1.414l4.829 4.828 4.828-4.828a1 1 0 111.414 1.414l-4.828 4.829 4.828 4.828z"
							></path>
							<path
								class="astronav-open-icon astronav-toggle"
								fill-rule="evenodd"
								d="M4 5h16a1 1 0 010 2H4a1 1 0 110-2zm0 6h16a1 1 0 010 2H4a1 1 0 010-2zm0 6h16a1 1 0 010 2H4a1 1 0 010-2z"
							></path>
						</svg>
					</button>
				</div>
			</div>
			<nav class="astronav-items astronav-toggle mt-2 hidden w-full lg:mt-0 lg:flex lg:w-auto">
				<ul class="flex flex-col lg:flex-row lg:gap-3">
					<li class="relative isolate z-50">
						<menu class="astronav-dropdown group" aria-expanded="false">
							<button
								class="focus-visible:shadow-outline-blue flex w-full items-center gap-1 rounded-full py-2 text-sm text-gray-600 transition hover:text-blue-600 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-blue-500 focus-visible:ring-offset-2 lg:w-auto lg:px-3"
							>
								<span>Pages</span>
								<svg
									xmlns="http://www.w3.org/2000/svg"
									fill="none"
									viewBox="0 0 24 24"
									stroke-width="3"
									stroke="currentColor"
									class="mt-0.5 h-3 w-3 group-open:rotate-180"
									style="--darkreader-inline-stroke: currentColor;"
									data-darkreader-inline-stroke=""
								>
									<path
										stroke-linecap="round"
										stroke-linejoin="round"
										d="M19.5 8.25l-7.5 7.5-7.5-7.5"></path>
								</svg>
							</button>
							<div class="astronav-dropdown dropdown-toggle hidden" aria-expanded="false">
								<div
									class="z-50 w-full origin-top-left border-l border-slate-200 lg:absolute lg:left-0 lg:w-48 lg:border-0"
								>
									<div
										class="flex flex-col px-3 lg:rounded-md lg:border lg:bg-white lg:py-2 lg:shadow"
									>
										<a
											href="/features"
											class="focus-visible:shadow-outline-blue rounded py-1 text-sm text-gray-600 hover:text-blue-600 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-blue-500 focus-visible:ring-offset-2"
										>
											Features
										</a><a
											href="/integrations"
											class="focus-visible:shadow-outline-blue rounded py-1 text-sm text-gray-600 hover:text-blue-600 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-blue-500 focus-visible:ring-offset-2"
										>
											Integrations
										</a><a
											href="/blog//typography-example"
											class="focus-visible:shadow-outline-blue rounded py-1 text-sm text-gray-600 hover:text-blue-600 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-blue-500 focus-visible:ring-offset-2"
										>
											Blog Details
										</a><a
											href="/404"
											class="focus-visible:shadow-outline-blue rounded py-1 text-sm text-gray-600 hover:text-blue-600 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-blue-500 focus-visible:ring-offset-2"
										>
											404 Page
										</a>
									</div>
								</div>
							</div>
						</menu>
					</li><li>
						<a
							href="/pricing"
							class="focus-visible:shadow-outline-blue flex rounded-full py-2 text-sm text-gray-600 transition hover:text-blue-600 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-blue-500 focus-visible:ring-offset-2 lg:px-3"
						>
							Pricing
						</a>
					</li><li>
						<a
							href="/about"
							class="focus-visible:shadow-outline-blue flex rounded-full py-2 text-sm text-gray-600 transition hover:text-blue-600 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-blue-500 focus-visible:ring-offset-2 lg:px-3"
						>
							About
						</a>
					</li><li>
						<a
							href="/blog"
							class="focus-visible:shadow-outline-blue flex rounded-full py-2 text-sm text-gray-600 transition hover:text-blue-600 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-blue-500 focus-visible:ring-offset-2 lg:px-3"
						>
							Blog
						</a>
					</li><li>
						<a
							href="/contact"
							class="focus-visible:shadow-outline-blue flex rounded-full py-2 text-sm text-gray-600 transition hover:text-blue-600 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-blue-500 focus-visible:ring-offset-2 lg:px-3"
						>
							Contact
						</a>
					</li>
				</ul>
				<div class="mt-3 flex items-center gap-4 lg:hidden">
					<a
						href="#"
						class="focus-visible:shadow-outline-blue w-full rounded-full border-2 border-transparent bg-gray-100 px-5 py-2 text-center transition hover:bg-gray-200 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-blue-500 focus-visible:ring-offset-2"
						>Log in
					</a>
					<a
						href="#"
						class="focus-visible:shadow-outline-blue w-full rounded-full bg-blue-600 px-5 py-2 text-center text-white transition hover:bg-blue-800 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-blue-500 focus-visible:ring-offset-2"
						>Try for Free
					</a>
				</div>
			</nav>
			<script data-astro-exec="">
				;(function () {
					const closeOnClick = false

					;["DOMContentLoaded", "astro:after-swap"].forEach((event) => {
						document.addEventListener(event, addListeners)
					})

					// Function to clone and replace elements
					function cloneAndReplace(element) {
						const clone = element.cloneNode(true)
						element.parentNode.replaceChild(clone, element)
					}

					function addListeners() {
						// Clean up existing listeners
						const oldMenuButton = document.getElementById("astronav-menu")
						if (oldMenuButton) {
							cloneAndReplace(oldMenuButton)
						}

						const oldDropdownMenus = document.querySelectorAll(".astronav-dropdown")
						oldDropdownMenus.forEach((menu) => {
							cloneAndReplace(menu)
						})

						// Mobile nav toggle
						const menuButton = document.getElementById("astronav-menu")
						menuButton && menuButton.addEventListener("click", toggleMobileNav)

						// Dropdown menus
						const dropdownMenus = document.querySelectorAll(".astronav-dropdown")
						dropdownMenus.forEach((menu) => {
							const button = menu.querySelector("button")
							button &&
								button.addEventListener("click", (event) =>
									toggleDropdownMenu(event, menu, dropdownMenus)
								)

							// Handle Submenu Dropdowns
							const dropDownSubmenus = menu.querySelectorAll(".astronav-dropdown-submenu")

							dropDownSubmenus.forEach((submenu) => {
								const submenuButton = submenu.querySelector("button")
								submenuButton &&
									submenuButton.addEventListener("click", (event) => {
										event.stopImmediatePropagation()
										toggleSubmenuDropdown(event, submenu)
									})
							})
						})

						// Clicking away from dropdown will remove the dropdown class
						document.addEventListener("click", closeAllDropdowns)

						if (closeOnClick) {
							handleCloseOnClick()
						}
					}

					function toggleMobileNav() {
						;[...document.querySelectorAll(".astronav-toggle")].forEach((el) => {
							el.classList.toggle("hidden")
						})
					}

					function toggleDropdownMenu(event, menu, dropdownMenus) {
						toggleMenu(menu)

						// Close one dropdown when selecting another
						Array.from(dropdownMenus)
							.filter((el) => el !== menu && !menu.contains(el))
							.forEach(closeMenu)

						event.stopPropagation()
					}

					function toggleSubmenuDropdown(event, submenu) {
						event.stopPropagation()
						toggleMenu(submenu)

						// Close sibling submenus at the same nesting level
						const siblingSubmenus = submenu
							.closest(".astronav-dropdown")
							.querySelectorAll(".astronav-dropdown-submenu")
						Array.from(siblingSubmenus)
							.filter((el) => el !== submenu && !submenu.contains(el))
							.forEach(closeMenu)
					}

					function closeAllDropdowns(event) {
						const dropdownMenus = document.querySelectorAll(".dropdown-toggle")
						const dropdownParent = document.querySelectorAll(
							".astronav-dropdown, .astronav-dropdown-submenu"
						)
						const isButtonInsideDropdown = [
							...document.querySelectorAll(
								".astronav-dropdown button, .astronav-dropdown-submenu button, #astronav-menu"
							),
						].some((button) => button.contains(event.target))
						if (!isButtonInsideDropdown) {
							dropdownMenus.forEach((d) => {
								// console.log("I ran", d);
								// if (!d.contains(event.target)) {
								d.classList.remove("open")
								d.removeAttribute("open")
								d.classList.add("hidden")
								// }
							})
							dropdownParent.forEach((d) => {
								d.classList.remove("open")
								d.removeAttribute("open")
								d.setAttribute("aria-expanded", "false")
							})
						}
					}

					function toggleMenu(menu) {
						menu.classList.toggle("open")
						const expanded = menu.getAttribute("aria-expanded") === "true"
						menu.setAttribute("aria-expanded", expanded ? "false" : "true")
						menu.hasAttribute("open") ? menu.removeAttribute("open") : menu.setAttribute("open", "")

						const dropdownToggle = menu.querySelector(".dropdown-toggle")
						const dropdownExpanded = dropdownToggle.getAttribute("aria-expanded")
						dropdownToggle.classList.toggle("hidden")
						dropdownToggle.setAttribute(
							"aria-expanded",
							dropdownExpanded === "true" ? "false" : "true"
						)
					}

					function closeMenu(menu) {
						// console.log("closing", menu);
						menu.classList.remove("open")
						menu.removeAttribute("open")
						menu.setAttribute("aria-expanded", "false")
						const dropdownToggles = menu.querySelectorAll(".dropdown-toggle")
						dropdownToggles.forEach((toggle) => {
							toggle.classList.add("hidden")
							toggle.setAttribute("aria-expanded", "false")
						})
					}

					function handleCloseOnClick() {
						const navMenuItems = document.querySelector(".astronav-items")
						const navToggle = document.getElementById("astronav-menu")
						const navLink = navMenuItems && navMenuItems.querySelectorAll("a")

						const MenuIcons = navToggle.querySelectorAll(".astronav-toggle")

						navLink &&
							navLink.forEach((item) => {
								item.addEventListener("click", () => {
									navMenuItems?.classList.add("hidden")
									MenuIcons.forEach((el) => {
										el.classList.toggle("hidden")
									})
								})
							})
					}
				})()
			</script>
			<div>
				<div class="hidden items-center gap-4 lg:flex">
					<a
						href="#"
						class="focus-visible:shadow-outline-blue rounded-full px-2 py-1 text-sm transition focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-blue-500 focus-visible:ring-offset-2"
						>Log in</a
					>
					<a
						href="#"
						class="focus-visible:shadow-outline-blue group inline-flex items-center gap-px rounded-full bg-blue-600 px-4 py-2 text-center text-sm text-white transition hover:bg-blue-800 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-blue-500 focus-visible:ring-offset-2"
					>
						<span>Try for Free</span>
						<svg
							xmlns="http://www.w3.org/2000/svg"
							viewBox="0 0 20 20"
							fill="currentColor"
							class="mt-px h-4 w-4 transition-transform group-hover:translate-x-1"
							style="--darkreader-inline-fill: currentColor;"
							data-darkreader-inline-fill=""
						>
							<path
								fill-rule="evenodd"
								d="M7.21 14.77a.75.75 0 01.02-1.06L11.168 10 7.23 6.29a.75.75 0 111.04-1.08l4.5 4.25a.75.75 0 010 1.08l-4.5 4.25a.75.75 0 01-1.06-.02z"
								clip-rule="evenodd"></path>
						</svg>
					</a>
				</div>
			</div>
		</div>
	</div>
</header>
<script data-astro-exec="">
	;(function () {
		const scrollY = 50
		const defaultClass = "py-5 border-transparent"
		const activeClass = "py-2 bg-white/80 border-gray-200 backdrop-blur-lg"

		let scrollPos = 0
		let ticking = false

		function OnScroll(scrollPos) {
			const headers = document.querySelectorAll(".astronav-sticky-header")
			const classArray = activeClass.split(" ")
			const replaceArray = defaultClass.split(" ")

			headers.forEach((header) => {
				if (scrollPos > scrollY) {
					header.classList.remove(...replaceArray)
					header.classList.add("is-active", ...classArray)
					header.setAttribute("active", "")
				}
				// reduce the scrollY to avoid flickering when scrolling up
				if (scrollPos < Math.max(scrollY - 20, 0)) {
					header.classList.remove("is-active", ...classArray)
					header.classList.add(...replaceArray)
					header.removeAttribute("active")
				}
			})
		}

		// Scroll event throttling as per MDN
		// https://developer.mozilla.org/en-US/docs/Web/API/Document/scroll_event

		document.addEventListener("scroll", (event) => {
			scrollPos = window.scrollY
			if (!ticking) {
				window.requestAnimationFrame(() => {
					OnScroll(scrollPos)
					ticking = false
				})

				ticking = true
			}
		})
	})()
</script>
